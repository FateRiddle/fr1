[{"/Users/nasa/code/try/fr1.0/src/index.js":"1","/Users/nasa/code/try/fr1.0/src/App.js":"2","/Users/nasa/code/try/fr1.0/src/reportWebVitals.js":"3","/Users/nasa/code/try/fr1.0/src/utils.js":"4","/Users/nasa/code/try/fr1.0/src/hooks.js":"5","/Users/nasa/code/try/fr1.0/src/FR/index.js":"6","/Users/nasa/code/try/fr1.0/src/FR/RenderChildren.js":"7","/Users/nasa/code/try/fr1.0/src/FR/RenderField.js":"8","/Users/nasa/code/try/fr1.0/src/mapping.js":"9","/Users/nasa/code/try/fr1.0/src/widgets/antd/index.js":"10","/Users/nasa/code/try/fr1.0/src/widgets/antd/checkbox.js":"11","/Users/nasa/code/try/fr1.0/src/widgets/antd/checkboxes.js":"12","/Users/nasa/code/try/fr1.0/src/widgets/antd/color.js":"13","/Users/nasa/code/try/fr1.0/src/widgets/antd/date.js":"14","/Users/nasa/code/try/fr1.0/src/widgets/antd/dateRange.js":"15","/Users/nasa/code/try/fr1.0/src/widgets/antd/listEditor.js":"16","/Users/nasa/code/try/fr1.0/src/widgets/antd/map.js":"17","/Users/nasa/code/try/fr1.0/src/widgets/antd/multiSelect.js":"18","/Users/nasa/code/try/fr1.0/src/widgets/antd/radio.js":"19","/Users/nasa/code/try/fr1.0/src/widgets/antd/number.js":"20","/Users/nasa/code/try/fr1.0/src/widgets/antd/select.js":"21","/Users/nasa/code/try/fr1.0/src/widgets/antd/slider.js":"22","/Users/nasa/code/try/fr1.0/src/widgets/antd/textarea.js":"23","/Users/nasa/code/try/fr1.0/src/widgets/antd/switch.js":"24","/Users/nasa/code/try/fr1.0/src/widgets/antd/upload.js":"25","/Users/nasa/code/try/fr1.0/src/widgets/antd/input.js":"26","/Users/nasa/code/try/fr1.0/src/widgets/antd/list.jsx":"27","/Users/nasa/code/try/fr1.0/src/components/descList.jsx":"28","/Users/nasa/code/try/fr1.0/src/components/dateHoc.jsx":"29","/Users/nasa/code/try/fr1.0/src/components/foldIcon.jsx":"30","/Users/nasa/code/try/fr1.0/src/components/rangeHoc.jsx":"31","/Users/nasa/code/try/fr1.0/src/components/multiSelectHoc.jsx":"32","/Users/nasa/code/try/fr1.0/src/components/numberHoc.jsx":"33","/Users/nasa/code/try/fr1.0/src/components/radioHoc.jsx":"34","/Users/nasa/code/try/fr1.0/src/components/previewContent.jsx":"35","/Users/nasa/code/try/fr1.0/src/components/selectHoc.jsx":"36"},{"size":681,"mtime":1607306237000,"results":"37","hashOfConfig":"38"},{"size":1363,"mtime":1608521883000,"results":"39","hashOfConfig":"38"},{"size":362,"mtime":1607259665000,"results":"40","hashOfConfig":"38"},{"size":25131,"mtime":1607307893000,"results":"41","hashOfConfig":"38"},{"size":4305,"mtime":1608513717000,"results":"42","hashOfConfig":"38"},{"size":3177,"mtime":1608522323000,"results":"43","hashOfConfig":"38"},{"size":327,"mtime":1608519497000,"results":"44","hashOfConfig":"38"},{"size":3857,"mtime":1608522380000,"results":"45","hashOfConfig":"38"},{"size":1268,"mtime":1608518140000,"results":"46","hashOfConfig":"38"},{"size":822,"mtime":1608518238000,"results":"47","hashOfConfig":"38"},{"size":331,"mtime":1608518238000,"results":"48","hashOfConfig":"38"},{"size":702,"mtime":1608518238000,"results":"49","hashOfConfig":"38"},{"size":941,"mtime":1608518238000,"results":"50","hashOfConfig":"38"},{"size":414,"mtime":1608518238000,"results":"51","hashOfConfig":"38"},{"size":332,"mtime":1608518238000,"results":"52","hashOfConfig":"38"},{"size":709,"mtime":1608518238000,"results":"53","hashOfConfig":"38"},{"size":124,"mtime":1608518238000,"results":"54","hashOfConfig":"38"},{"size":192,"mtime":1608518238000,"results":"55","hashOfConfig":"38"},{"size":270,"mtime":1608518238000,"results":"56","hashOfConfig":"38"},{"size":193,"mtime":1608518238000,"results":"57","hashOfConfig":"38"},{"size":177,"mtime":1608518238000,"results":"58","hashOfConfig":"38"},{"size":1286,"mtime":1608518238000,"results":"59","hashOfConfig":"38"},{"size":505,"mtime":1608518238000,"results":"60","hashOfConfig":"38"},{"size":257,"mtime":1608518238000,"results":"61","hashOfConfig":"38"},{"size":1061,"mtime":1608518238000,"results":"62","hashOfConfig":"38"},{"size":1029,"mtime":1608518238000,"results":"63","hashOfConfig":"38"},{"size":8485,"mtime":1608518238000,"results":"64","hashOfConfig":"38"},{"size":2271,"mtime":1608518957000,"results":"65","hashOfConfig":"38"},{"size":872,"mtime":1608518957000,"results":"66","hashOfConfig":"38"},{"size":774,"mtime":1608518957000,"results":"67","hashOfConfig":"38"},{"size":767,"mtime":1608518957000,"results":"68","hashOfConfig":"38"},{"size":960,"mtime":1608518957000,"results":"69","hashOfConfig":"38"},{"size":632,"mtime":1608518957000,"results":"70","hashOfConfig":"38"},{"size":724,"mtime":1608518957000,"results":"71","hashOfConfig":"38"},{"size":317,"mtime":1608518957000,"results":"72","hashOfConfig":"38"},{"size":961,"mtime":1608518957000,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"adapdb",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"76"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"76"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"76"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"76"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"76"},"/Users/nasa/code/try/fr1.0/src/index.js",[],["157","158"],"/Users/nasa/code/try/fr1.0/src/App.js",[],"/Users/nasa/code/try/fr1.0/src/reportWebVitals.js",[],"/Users/nasa/code/try/fr1.0/src/utils.js",["159","160","161","162","163","164","165","166","167","168","169","170"],"import { nanoid } from 'nanoid';\nimport deepClone from 'clone';\n\n// 后面三个参数都是内部递归使用的，将schema的树形结构扁平化成一层, 每个item的结构\n// {\n//   parent: '#',\n//   schema: ...,\n//   children: []\n// }\n\n// TODO: 检验是否丢进去各种schema都能兜底不会crash\n\nexport function flattenSchema(schema, name = '#', parent, result = {}) {\n  const _schema = deepClone(schema);\n  let _name = name;\n  if (!_schema.$id) {\n    _schema.$id = _name; // 给生成的schema添加一个唯一标识，方便从schema中直接读取\n  }\n  const children = [];\n  const isObj = _schema.type === 'object' && _schema.properties;\n  const isList = _schema.type === 'array' && _schema.items && _schema.items.properties;\n  if (isObj) {\n    Object.entries(_schema.properties).forEach(([key, value]) => {\n      const uniqueName = _name + '.' + key;\n      children.push(uniqueName);\n      flattenSchema(value, uniqueName, _name, result);\n    });\n    delete _schema.properties;\n  }\n  if (isList) {\n    _name = _name + '[]';\n    Object.entries(_schema.items.properties).forEach(([key, value]) => {\n      const uniqueName = _name + '.' + key;\n      children.push(uniqueName);\n      flattenSchema(value, uniqueName, _name, result);\n    });\n    delete _schema.items.properties;\n  }\n  if (_schema.type) {\n    // TODO: 没有想好 validation 的部分\n    result[_name] = { parent, schema: _schema, children };\n  }\n  return result;\n}\n\n//////////   old\n\nfunction stringContains(str, text) {\n  return str.indexOf(text) > -1;\n}\n\nexport const isObject = (a) => stringContains(Object.prototype.toString.call(a), 'Object');\n\n// 克隆对象\nexport function clone(data) {\n  try {\n    return JSON.parse(JSON.stringify(data));\n  } catch (e) {\n    return data;\n  }\n}\n\n// '3' => true, 3 => true, undefined => false\nexport function isLooselyNumber(num) {\n  if (typeof num === 'number') return true;\n  if (typeof num === 'string') {\n    return !Number.isNaN(Number(num));\n  }\n  return false;\n}\n\nexport function isCssLength(str) {\n  if (typeof str !== 'string') return false;\n  return str.match(/^([0-9])*(%|px|rem|em)$/i);\n}\n\n// 深度对比\nexport function isDeepEqual(param1, param2) {\n  if (param1 === undefined && param2 === undefined) return true;\n  else if (param1 === undefined || param2 === undefined) return false;\n  if (param1 === null && param2 === null) return true;\n  else if (param1 === null || param2 === null) return false;\n  else if (param1.constructor !== param2.constructor) return false;\n\n  if (param1.constructor === Array) {\n    if (param1.length !== param2.length) return false;\n    for (let i = 0; i < param1.length; i++) {\n      if (param1[i].constructor === Array || param1[i].constructor === Object) {\n        if (!isDeepEqual(param1[i], param2[i])) return false;\n      } else if (param1[i] !== param2[i]) return false;\n    }\n  } else if (param1.constructor === Object) {\n    if (Object.keys(param1).length !== Object.keys(param2).length) return false;\n    for (let i = 0; i < Object.keys(param1).length; i++) {\n      const key = Object.keys(param1)[i];\n      if (\n        param1[key] &&\n        typeof param1[key] !== 'number' &&\n        (param1[key].constructor === Array || param1[key].constructor === Object)\n      ) {\n        if (!isDeepEqual(param1[key], param2[key])) return false;\n      } else if (param1[key] !== param2[key]) return false;\n    }\n  } else if (param1.constructor === String || param1.constructor === Number) {\n    return param1 === param2;\n  }\n  return true;\n}\n\n// 时间组件\nexport function getFormat(format) {\n  let dateFormat;\n  switch (format) {\n    case 'date':\n      dateFormat = 'YYYY-MM-DD';\n      break;\n    case 'time':\n      dateFormat = 'HH:mm:ss';\n      break;\n    default:\n      // dateTime\n      dateFormat = 'YYYY-MM-DD HH:mm:ss';\n  }\n  return dateFormat;\n}\n\nexport function hasRepeat(list) {\n  return list.find(\n    (x, i, self) => i !== self.findIndex((y) => JSON.stringify(x) === JSON.stringify(y)),\n  );\n}\n\n// ----------------- schema 相关\n\n// 合并propsSchema和UISchema。由于两者的逻辑相关性，合并为一个大schema能简化内部处理\nexport function combineSchema(propsSchema = {}, uiSchema = {}) {\n  const propList = getChildren(propsSchema);\n  const newList = propList.map((p) => {\n    const { name } = p;\n    const { type, enum: options, properties, items } = p.schema;\n    const isObj = type === 'object' && properties;\n    const isArr = type === 'array' && items && !options; // enum + array 代表的多选框，没有sub\n    const ui = name && uiSchema[p.name];\n    if (!ui) {\n      return p;\n    }\n    // 如果是list，递归合并items\n    if (isArr) {\n      const newItems = combineSchema(items, ui.items || {});\n      return { ...p, schema: { ...p.schema, ...ui, items: newItems } };\n    }\n    // object递归合并整个schema\n    if (isObj) {\n      const newSchema = combineSchema(p.schema, ui);\n      return { ...p, schema: newSchema };\n    }\n    return { ...p, schema: { ...p.schema, ...ui } };\n  });\n\n  const newObj = {};\n  newList.forEach((s) => {\n    newObj[s.name] = s.schema;\n  });\n\n  const topLevelUi = {};\n  Object.keys(uiSchema).forEach((key) => {\n    if (typeof key === 'string' && key.substring(0, 3) === 'ui:') {\n      topLevelUi[key] = uiSchema[key];\n    }\n  });\n  if (isEmpty(newObj)) {\n    return { ...propsSchema, ...topLevelUi };\n  }\n  return { ...propsSchema, ...topLevelUi, properties: newObj };\n}\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\n// 获得propsSchema的children\nfunction getChildren(schema) {\n  if (!schema) return [];\n  const {\n    // object\n    properties,\n    // array\n    items,\n    type,\n  } = schema;\n  if (!properties && !items) {\n    return [];\n  }\n  let schemaSubs = {};\n  if (type === 'object') {\n    schemaSubs = properties;\n  }\n  if (type === 'array') {\n    schemaSubs = items;\n  }\n  return Object.keys(schemaSubs).map((name) => ({\n    schema: schemaSubs[name],\n    name,\n  }));\n}\n\n// 合并多个schema树，比如一个schema的树节点是另一个schema\nexport function combine() {}\n\n// 代替eval的函数\nexport const parseString = (string) => Function('\"use strict\";return (' + string + ')')();\n\n// 解析函数字符串值\nexport const evaluateString = (string, formData, rootValue) =>\n  Function(`\"use strict\";\n    const rootValue = ${JSON.stringify(rootValue)};\n    const formData = ${JSON.stringify(formData)};\n    return (${string})`)();\n\n// 判断schema的值是是否是“函数”\n// JSON无法使用函数值的参数，所以使用\"{{...}}\"来标记为函数，也可使用@标记，不推荐。\nexport function isFunction(func) {\n  if (typeof func === 'function') {\n    return true;\n  }\n  if (typeof func === 'string' && func.substring(0, 1) === '@') {\n    return func.substring(1);\n  }\n  if (\n    typeof func === 'string' &&\n    func.substring(0, 2) === '{{' &&\n    func.substring(func.length - 2, func.length) === '}}'\n  ) {\n    return func.substring(2, func.length - 2);\n  }\n  return false;\n}\n\n// 判断schema中是否有属性值是函数表达式\nexport function isFunctionSchema(schema) {\n  return Object.keys(schema).some((key) => {\n    if (typeof schema[key] === 'function') {\n      return true;\n    } else if (typeof schema[key] === 'string') {\n      return isFunction(schema[key]);\n    } else if (typeof schema[key] === 'object') {\n      return isFunctionSchema(schema[key]);\n    } else {\n      return false;\n    }\n  });\n}\n\nexport const getKeyFromUniqueId = (uniqueId = '#') => {\n  const arr = uniqueId.split('/');\n  return arr[arr.length - 1];\n};\n\nexport const changeKeyFromUniqueId = (uniqueId = '#', key = 'something') => {\n  const arr = uniqueId.split('/');\n  if (typeof key === 'string' || typeof key === 'number') {\n    arr[arr.length - 1] = key;\n  }\n  return arr.join('/');\n};\n\nconst copyFlattenItem = (_item) => {\n  return {\n    parent: _item.parent,\n    schema: { ..._item.schema },\n    data: _item.data,\n    children: _item.children,\n  };\n};\n\n// final = true 用于最终的导出的输出\n// 几种特例：\n// 1. 删除时值删除了item，没有删除和parent的关联，也没有删除children，所以要在解析这步来兜住 (所有的解析都是)\n// 2. 修改$id的情况, 修改的是schema内的$id, 解析的时候要把schema.$id 作为真正的id (final = true的解析)\nexport function idToSchema(flatten, id = '#', final = false) {\n  let schema = {};\n  const _item = flatten[id];\n  const item = deepClone(_item);\n  if (item) {\n    schema = { ...item.schema };\n    // 最终输出去掉 $id\n    if (final) {\n      schema.$id && delete schema.$id;\n    }\n    if (item.children.length > 0) {\n      item.children.forEach((child) => {\n        let childId = child;\n        // TODO: 这个情况会出现吗？return会有问题吗？\n        if (!flatten[child]) {\n          return;\n        }\n        // 最终输出将所有的 key 值改了\n        try {\n          if (final) {\n            childId = flatten[child].schema.$id;\n          }\n        } catch (error) {\n          console.log('catch', error);\n        }\n        const key = getKeyFromUniqueId(childId);\n        if (schema.type === 'object') {\n          if (!schema.properties) {\n            schema.properties = {};\n          }\n          schema.properties[key] = idToSchema(flatten, child, final);\n        }\n        if (schema.type === 'array' && schema.items && schema.items.type === 'object') {\n          if (!schema.items.properties) {\n            schema.items.properties = {};\n          }\n          schema.items.properties[key] = idToSchema(flatten, child, final);\n        }\n      });\n    }\n  }\n  return schema;\n}\n\n// 删除对应id的schema（以及所有它的子schema）\nexport const deleteSchema = (id, schema) => {\n  const flatten = flattenSchema(schema);\n  if (id in flatten) {\n    delete flatten[id];\n  }\n  return idToSchema(flatten);\n};\n\n// 复制对应id的schema\n// export const copySchema = (id, schema) => {\n//   const flatten = flattenSchema(schema);\n//   let newId = id + '$$' + nanoid(10);\n//   if (id && typeof id === 'string' && id.split('$$').length > 1) {\n//     newId = id.split('$$')[0] + '$$' + nanoid(10);\n//   }\n//   if (id in flatten) {\n//     // 将创建的新id注入到parent的children array\n//     const parent = flatten[id].parent;\n//     if (parent && parent in flatten) {\n//       const children = flatten[parent].children;\n//       try {\n//         const idx = children.findIndex((x) => x === id);\n//         children.splice(idx + 1, 0, newId);\n//       } catch (error) {\n//         console.error(error.message);\n//       }\n//     }\n\n//     try {\n//       // 简单的实现一下拷贝\n//       flatten[newId] = {\n//         parent: flatten[id].parent,\n//         schema: { ...flatten[id].schema },\n//         children: flatten[id].children,\n//       };\n//       flatten[newId].schema.$id = newId;\n//     } catch (error) {\n//       console.error(error.message);\n//     }\n//   }\n//   return [idToSchema(flatten), newId];\n// };\n\nexport const copyItem = (flatten, $id) => {\n  let newFlatten = { ...flatten };\n  try {\n    const item = flatten[$id];\n    const newId = $id + nanoid(6);\n    const siblings = newFlatten[item.parent].children;\n    const idx = siblings.findIndex((x) => x === $id);\n    siblings.splice(idx + 1, 0, newId);\n    newFlatten[newId] = deepClone(newFlatten[$id]);\n    newFlatten[newId].schema.$id = newId;\n    return [newFlatten, newId];\n  } catch (error) {\n    console.error(error, 'catcherror');\n    return [flatten, $id];\n  }\n};\n\n// schema的某个id位置后面添加一个名字是key的subSchema，生成新的schema\n// TODO: 如果没有任何选中，或者选中的是object，逻辑要变\n\nexport const addSchema = ({ id, key, schema, subSchema }) => {\n  const flatten = flattenSchema(schema);\n  let newId = changeKeyFromUniqueId(id, key) + '$$' + nanoid(10);\n  if (id in flatten) {\n    // 生成新id，并将其放置于parent节点的children属性中\n    const parent = flatten[id].parent;\n    if (parent && parent in flatten) {\n      const children = flatten[parent].children;\n      try {\n        const idx = children.findIndex((x) => x === id);\n        children.splice(idx + 1, 0, newId);\n      } catch (error) {\n        console.error(error.message);\n      }\n    }\n    // 生成新节点\n    try {\n      flatten[newId] = {\n        parent: flatten[id].parent,\n        schema: subSchema,\n        children: [],\n      };\n      flatten[newId].schema.$id = newId;\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n  // 将id也返回，用于ui展示显示\n  return [idToSchema(flatten), newId];\n};\n\n// Left 点击添加 item\nexport const addItem = ({ selected, name, schema, flatten }) => {\n  let _selected = selected || '#';\n  let newId;\n  // string第一个是0，说明点击了object、list的里侧\n  if ((_selected && _selected[0] === '0') || _selected === '#') {\n    const newFlatten = { ...flatten };\n    try {\n      let oldId = _selected.substring(1);\n      newId = oldId + '/' + name + '_' + nanoid(6);\n      if (_selected === '#') {\n        newId = '#/' + name + '_' + nanoid(6);\n        oldId = '#';\n      }\n      const siblings = newFlatten[oldId].children;\n      siblings.push(newId);\n      const newItem = {\n        parent: oldId,\n        schema: { ...schema, $id: newId },\n        data: undefined,\n        children: [],\n      };\n      newFlatten[newId] = newItem;\n    } catch (error) {\n      console.error(error, 'catch');\n    }\n    return { newId, newFlatten };\n  }\n  let _name = name + '_' + nanoid(6);\n  const idArr = selected.split('/');\n  idArr.pop();\n  idArr.push(_name);\n  newId = idArr.join('/');\n  const newFlatten = { ...flatten };\n  try {\n    const item = newFlatten[selected];\n    const siblings = newFlatten[item.parent].children;\n    const idx = siblings.findIndex((x) => x === selected);\n    siblings.splice(idx + 1, 0, newId);\n    const newItem = {\n      parent: item.parent,\n      schema: { ...schema, $id: newId },\n      data: undefined,\n      children: [],\n    };\n    newFlatten[newId] = newItem;\n  } catch (error) {\n    console.error(error);\n  }\n  return { newId, newFlatten };\n};\n\n// position 代表 drop 在元素的哪里: 'up' 上 'down' 下 'inside' 内部\nexport const dropItem = ({ dragId, dragItem, dropId, position, flatten }) => {\n  const _position = dropId === '#' ? 'inside' : position;\n  let newFlatten = { ...flatten };\n  // 会动到三块数据，dragItem, dragParent, dropParent. 其中dropParent可能就是dropItem（inside的情况）\n  if (dragItem) {\n    newFlatten[dragId] = dragItem;\n  }\n  const _dragItem = dragItem || newFlatten[dragId];\n\n  const dropItem = newFlatten[dropId];\n  let dropParent = dropItem;\n  if (_position !== 'inside') {\n    const parentId = dropItem.parent;\n    dropParent = newFlatten[parentId];\n  }\n  // TODO: 这块的体验，现在这样兜底了，但是drag起一个元素了，应该让原本变空\n  if (dropId.indexOf(dragId) > -1) {\n    return newFlatten;\n  }\n\n  let newId = dragId;\n  try {\n    const newParentId = dropParent.schema.$id;\n    newId = newId.replace(_dragItem.parent, newParentId);\n  } catch (error) {}\n\n  // dragParent 的 children 删除 dragId\n  try {\n    const dragParent = newFlatten[_dragItem.parent];\n    const idx = dragParent.children.indexOf(dragId);\n    if (idx > -1) {\n      dragParent.children.splice(idx, 1);\n    }\n  } catch (error) {\n    console.error(error);\n  }\n  try {\n    // dropParent 的 children 添加 dragId\n    const newChildren = dropParent.children || []; // 要考虑children为空，inside的情况\n    const idx = newChildren.indexOf(dropId);\n    switch (_position) {\n      case 'up':\n        newChildren.splice(idx, 0, dragId);\n        break;\n      case 'down':\n        newChildren.splice(idx + 1, 0, dragId);\n        break;\n      default:\n        // inside 作为 default 情况\n        newChildren.push(dragId);\n        break;\n    }\n    // console.log(newChildren, dropParent, 'dropParent');\n    dropParent.children = newChildren;\n  } catch (error) {\n    console.error(error);\n  }\n\n  _dragItem.parent = dropParent.$id;\n  return [newFlatten, newId];\n};\n// TODO: 是不是要考虑如果drag前，已经有id和schema.id不一致的情况，会不会有问题？\n\n// export const changeSubSchema = ({ id, schema, subSchema }) => {\n//   const flatten = flattenSchema(schema);\n//   if (id in flatten) {\n//     const oldSchema = flatten[id];\n//     const newId = subSchema.$id;\n//     if (oldSchema.$id !== subSchema.$id) {\n//     }\n//   }\n// };\n\n// 解析函数字符串值\n// TODO: 没有考虑list的情况\n// export const getDataById = (data, idString) => {\n//   if (idString === '#') return data;\n//   try {\n//     const idConnectedByDots = idString\n//       .split('/')\n//       .filter(id => id !== '#')\n//       .map(id => `[\"${id}\"]`)\n//       .join('');\n//     const string = `data${idConnectedByDots}`;\n//     const a = `\"use strict\";\n//     const data = ${JSON.stringify(data)};\n//     return ${string}`;\n//     return Function(a)();\n//     // TODO: can be better\n//     // let result = { ...data };\n//     // idConnectedByDots.forEach((item) => {\n//     //   result = result[item];\n//     // });\n//     // return result;\n//   } catch (error) {\n//     return undefined;\n//   }\n// };\n\n// TODO: 没有考虑list的情况\nexport const dataToFlatten = (flatten, data) => {\n  if (!flatten || !data) return {};\n  Object.entries(flatten).forEach(([id, item]) => {\n    const branchData = getDataById(data, id);\n    flatten[id].data = branchData;\n  });\n  return flatten;\n};\n\nexport const onChangeById = (onChange) => (id, value) => {};\n\n// TODO: 没有考虑list的情况\nexport const flattenToData = (flatten, id = '#') => {\n  try {\n    let result = flatten[id].data;\n    const ids = Object.keys(flatten);\n    const childrenIds = ids.filter((item) => {\n      const lengthOfId = id.split('/').length;\n      const lengthOfChild = item.split('/').length;\n      return item.indexOf(id) > -1 && lengthOfChild > lengthOfId;\n    });\n    if (childrenIds && childrenIds.length > 0) {\n      if (result === undefined) {\n        // TODO: 这个是简化的逻辑，在编辑器模型下，list和object都是object结构\n        if (['object', 'array'].indexOf(flatten[id].schema.type) > -1) {\n          result = {};\n        }\n      }\n      childrenIds.forEach((c) => {\n        const lengthOfId = id.split('/').length;\n        const lengthOfChild = c.split('/').length;\n        // 只比他长1，是直属的child\n        if (lengthOfChild === lengthOfId + 1) {\n          const cData = flattenToData(flatten, c);\n          const cKey = getKeyFromUniqueId(c);\n          result[cKey] = cData;\n        }\n      });\n    }\n    return result;\n  } catch (error) {\n    return undefined;\n  }\n};\n\n// 例如当前item的id = '#/obj/input'  propName: 'ui:labelWidth' 往上一直找，直到找到第一个不是undefined的值\nexport const getParentProps = (propName, id, flatten) => {\n  try {\n    const item = flatten[id];\n    if (item.schema[propName] !== undefined) return item.schema[propName];\n    if (item && item.parent) {\n      const parentSchema = flatten[item.parent].schema;\n      if (parentSchema[propName] !== undefined) {\n        return parentSchema[propName];\n      } else {\n        return getParentProps(propName, item.parent, flatten);\n      }\n    }\n  } catch (error) {\n    return undefined;\n  }\n};\n\nexport const getSaveNumber = () => {\n  const searchStr = localStorage.getItem('SAVES');\n  if (searchStr) {\n    try {\n      const saves = JSON.parse(searchStr);\n      const length = saves.length;\n      if (length) return length + 1;\n    } catch (error) {\n      return 1;\n    }\n  } else {\n    return 1;\n  }\n};\n\nexport function looseJsonParse(obj) {\n  return Function('\"use strict\";return (' + obj + ')')();\n}\n\n// 获得propsSchema的children\nfunction getChildren2(schema) {\n  if (!schema) return [];\n  const {\n    // object\n    properties,\n    // array\n    items,\n    type,\n  } = schema;\n  if (!properties && !items) {\n    return [];\n  }\n  let schemaSubs = {};\n  if (type === 'object') {\n    schemaSubs = properties;\n  }\n  if (type === 'array') {\n    schemaSubs = items.properties;\n  }\n  return Object.keys(schemaSubs).map((name) => ({\n    schema: schemaSubs[name],\n    name,\n  }));\n}\n\n// formily Schema => FR schema\nconst transformFrom = (mySchema, parent = null) => {\n  const isObj = mySchema.type === 'object' && mySchema.properties;\n  const isList = mySchema.type === 'array' && mySchema.items && mySchema.items.properties;\n  const hasChildren = isObj || isList;\n  // debugger;\n  if (!hasChildren) {\n    if (mySchema.enum && Array.isArray(mySchema.enum)) {\n      const list = mySchema.enum;\n      if (isObject(list[0]) && list[0].label !== undefined && list[0].value !== undefined) {\n        const _enumNames = list.map((i) => i.label);\n        const _enum = list.map((i) => i.value);\n        mySchema.enum = _enum;\n        mySchema.enumNames = _enumNames;\n      }\n    }\n  } else {\n    const childrenList = getChildren2(mySchema);\n    childrenList.map((item) => {\n      if (isObj) {\n        mySchema.properties[item.name] = transformFrom(item.schema, mySchema);\n      }\n      if (isList) {\n        mySchema.items.properties[item.name] = transformFrom(item.schema, mySchema);\n      }\n    });\n  }\n  if (mySchema['x-component']) {\n    mySchema['ui:widget'] = mySchema['x-component'];\n  }\n  if (mySchema['x-component-props']) {\n    mySchema['ui:options'] = mySchema['x-component-props'];\n  }\n  if (parent && mySchema.required) {\n    if (parent.required && Array.isArray(parent.required)) {\n      parent.required.push(mySchema.name);\n    } else {\n      parent.required = [mySchema.name];\n    }\n  }\n  delete mySchema.key;\n  delete mySchema.name;\n  delete mySchema.required;\n  delete mySchema['x-component'];\n  delete mySchema['x-component-props'];\n  return mySchema;\n};\n\nexport const fromFormily = (schema) => {\n  const frSchema = transformFrom(schema);\n  return {\n    schema: frSchema,\n  };\n};\n\n// FR schema => formily Schema\nconst transformTo = (frSchema, parent = null, key = null) => {\n  const isObj = frSchema.type === 'object' && frSchema.properties;\n  const isList = frSchema.type === 'array' && frSchema.items && frSchema.items.properties;\n  const hasChildren = isObj || isList;\n  // debugger;\n  if (!hasChildren) {\n    if (\n      frSchema.enum &&\n      Array.isArray(frSchema.enum) &&\n      frSchema.enumNames &&\n      Array.isArray(frSchema.enumNames)\n    ) {\n      const list = frSchema.enum.map((item, idx) => ({\n        value: item,\n        label: frSchema.enumNames[idx],\n      }));\n      frSchema.enum = list;\n    }\n  } else {\n    const childrenList = getChildren2(frSchema);\n    childrenList.map((item) => {\n      if (isObj) {\n        frSchema.properties[item.name] = transformTo(item.schema, frSchema, item.name);\n      }\n      if (isList) {\n        frSchema.items.properties[item.name] = transformTo(item.schema, frSchema, item.name);\n      }\n    });\n  }\n  if (frSchema['ui:widget']) {\n    frSchema['x-component'] = frSchema['ui:widget'];\n  }\n  if (frSchema['ui:options']) {\n    frSchema['x-component-props'] = frSchema['ui:options'];\n  }\n  delete frSchema['ui:widget'];\n  delete frSchema['ui:options'];\n  delete frSchema['enumNames'];\n  if (key) {\n    frSchema.name = key;\n    frSchema.key = key;\n  }\n  if (parent && key && parent.required && Array.isArray(parent.required)) {\n    if (parent.required.indexOf(key) > -1) {\n      frSchema.required = true;\n    }\n  }\n  return frSchema;\n};\n\nexport const toFormily = (schema) => {\n  const frSchema = schema.schema;\n  return transformTo(frSchema);\n};\n\n// 解析函数字符串值\n// TODO: 没有考虑list的情况\n// getDataById(formData, '#/a/b/c')\nexport function getDataById(object, path) {\n  path = castPath(path, object);\n\n  let index = 0;\n  const length = path.length;\n\n  while (object != null && index < length) {\n    const key = toKey(path[index++]);\n    object = key ? object[key] : object;\n  }\n  return index && index == length ? object : undefined;\n}\n\nfunction castPath(value, object) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : value.match(/([^\\.\\/\\[\\]#\"']+)/g);\n}\n\nfunction toKey(value) {\n  if (typeof value === 'string') {\n    return value.replace(/^#\\/?/, '');\n  }\n  const result = `${value}`;\n  return result == '0' && 1 / value == -Infinity ? '-0' : result;\n}\n\nconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst reIsPlainProp = /^\\w*$/;\n\nfunction isKey(value, object) {\n  if (Array.isArray(value)) {\n    return false;\n  }\n  const type = typeof value;\n  if (type === 'number' || type === 'boolean' || value == null) {\n    return true;\n  }\n  return (\n    reIsPlainProp.test(value) ||\n    !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object))\n  );\n}\n\nexport const oldSchemaToNew = (schema) => {\n  if (schema && schema.propsSchema) {\n    const { propsSchema, ...rest } = schema;\n    return { schema: propsSchema, ...rest };\n  }\n  return schema;\n};\n\nexport const newSchemaToOld = (setting) => {\n  if (setting && setting.schema) {\n    const { schema, ...rest } = setting;\n    return { propsSchema: schema, ...rest };\n  }\n  return setting;\n};\n","/Users/nasa/code/try/fr1.0/src/hooks.js",[],"/Users/nasa/code/try/fr1.0/src/FR/index.js",[],"/Users/nasa/code/try/fr1.0/src/FR/RenderChildren.js",[],"/Users/nasa/code/try/fr1.0/src/FR/RenderField.js",["171"],"/Users/nasa/code/try/fr1.0/src/mapping.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/index.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/checkbox.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/checkboxes.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/color.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/date.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/dateRange.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/listEditor.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/map.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/multiSelect.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/radio.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/number.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/select.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/slider.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/textarea.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/switch.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/upload.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/input.js",[],"/Users/nasa/code/try/fr1.0/src/widgets/antd/list.jsx",["172"],"/**\n * Updated by Tw93 on 2019-12-01.\n * 数组组件\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as Icons from '@ant-design/icons';\nimport { Button } from 'antd';\nimport {\n  SortableContainer,\n  SortableHandle,\n  SortableElement,\n  arrayMove,\n} from 'react-sortable-hoc';\nimport { isFunction, evaluateString } from '../../utils';\nimport FoldIcon from '../../components/foldIcon';\nimport DescriptionList, { getDescription } from '../../components/descList';\n\nconst DragHandle = SortableHandle(() => (\n  <span className='fr-move-icon'>:::</span>\n));\n\nclass listItem extends React.Component {\n  componentDidMount() {\n    const { p = {}, name, fold } = this.props;\n    const description = getDescription({\n      schema: p.schema,\n      value: p.value,\n      index: name,\n    });\n    // 如果第一个值不为空，则收起\n    // 新增的值为0，不折叠\n    const hasValue = description && description[0] && description[0].text;\n    if (hasValue && fold !== 0) {\n      this.props.toggleFoldItem(name);\n    }\n  }\n\n  toggleFold = () => {\n    this.props.toggleFoldItem(this.props.name);\n  };\n\n  render() {\n    const { item, p = {}, name, fold } = this.props;\n    const descProps = { ...p, index: name };\n    const { options = {}, readonly, formData, value: rootValue } = p;\n    const { foldable: canFold } = options;\n    let { hideDelete, itemButtons } = options;\n\n    // 判断 hideDelete 是不是函数，是的话将计算后的值赋回\n    let _isFunction = isFunction(hideDelete);\n    if (_isFunction) {\n      // isFunction 返回为 true 则说明只可能为 string | Function\n      if (typeof _isFunction === 'string') {\n        hideDelete = evaluateString(_isFunction, formData, rootValue);\n      } else if (typeof _isFunction === 'function') {\n        hideDelete = _isFunction(formData, rootValue);\n      }\n    }\n\n    // 只有当items为object时才做收起（fold）处理\n    const isObj = p.schema.items && p.schema.items.type == 'object';\n    let setClass =\n      'fr-set ba b--black-10 hover-b--black-20 relative flex flex-column';\n    if (canFold && fold) {\n      setClass += ' pv12';\n    } else if (p.displayType === 'row') {\n      setClass += ' pt44';\n    }\n    return (\n      <li className={setClass}>\n        {canFold && fold && isObj ? <DescriptionList {...descProps} /> : item}\n        {canFold && (\n          <FoldIcon\n            fold={fold}\n            onClick={this.toggleFold}\n            style={{ position: 'absolute', top: 12, right: 32 }}\n          />\n        )}\n        {!readonly && <DragHandle />}\n        {!((canFold && fold) || hideDelete || readonly) && (\n          <div className='self-end flex'>\n            <FrButton\n              type='dashed'\n              icon='delete'\n              onClick={() => {\n                const value = [...p.value];\n                value.splice(name, 1);\n                p.onChange(value);\n              }}\n            >\n              删除\n            </FrButton>\n            {itemButtons &&\n              itemButtons.length > 0 &&\n              itemButtons.map((btn, idx) => {\n                return (\n                  <FrButton\n                    key={idx.toString()}\n                    className='ml2'\n                    type='dashed'\n                    icon={btn.icon}\n                    onClick={() => {\n                      const value = [...p.value];\n                      if (typeof window[btn.callback] === 'function') {\n                        const result = window[btn.callback](value, name); // eslint-disable-line\n                        p.onChange(result);\n                      }\n                    }}\n                  >\n                    {btn.text || ''}\n                  </FrButton>\n                );\n              })}\n          </div>\n        )}\n      </li>\n    );\n  }\n}\n\nconst SortableItem = SortableElement(listItem);\nclass fieldList extends React.Component {\n  handleAddClick = () => {\n    const { p, addUnfoldItem } = this.props;\n    const value = [...p.value];\n    value.push(p.newItem);\n    p.onChange(value);\n    addUnfoldItem();\n  };\n  // buttons is a list, each item looks like:\n  // {\n  //   \"text\": \"删除全部\",\n  //   \"icon\": \"delete\",\n  //   \"callback\": \"clearAll\"\n  // }\n\n  render() {\n    const { p, foldList = [], toggleFoldItem } = this.props;\n    const { options = {}, extraButtons = {} } = p || {};\n    // prefer ui:options/buttons to ui:extraButtons, but keep both for backwards compatibility\n    const buttons = options.buttons || extraButtons || [];\n    const { readonly, schema = {} } = p;\n    const { maxItems } = schema;\n    const list = p.value || [];\n    const canAdd = maxItems ? maxItems > list.length : true; // 当到达最大个数，新增按钮消失\n    return (\n      <ul className='pl0 ma0'>\n        {list.map((_, name) => (\n          <SortableItem\n            key={`item-${name}`}\n            index={name}\n            name={name}\n            p={p}\n            fold={foldList[name]}\n            toggleFoldItem={toggleFoldItem}\n            item={p.children}\n          />\n        ))}\n        {!readonly && (\n          <div className='tr'>\n            {canAdd && (\n              <FrButton icon='add' onClick={this.handleAddClick}>\n                新增\n              </FrButton>\n            )}\n            {buttons &&\n              buttons.length > 0 &&\n              buttons.map((item, i) => (\n                <FrButton\n                  className='ml2'\n                  icon={item.icon}\n                  key={i.toString()}\n                  onClick={() => {\n                    if (item.callback === 'clearAll') {\n                      p.onChange([]);\n                      return;\n                    }\n                    if (item.callback === 'copyLast') {\n                      const value = [...p.value];\n                      const lastIndex = value.length - 1;\n                      value.push(lastIndex > -1 ? value[lastIndex] : p.newItem);\n                      p.onChange(value);\n                      return;\n                    }\n                    if (typeof window[item.callback] === 'function') {\n                      const value = [...p.value];\n                      const onChange = value => p.onChange(value);\n                      window[item.callback](value, onChange, p.newItem); // eslint-disable-line\n                    }\n                  }}\n                >\n                  {item.text}\n                </FrButton>\n              ))}\n          </div>\n        )}\n      </ul>\n    );\n  }\n}\n\nconst SortableList = SortableContainer(fieldList);\nclass list extends React.Component {\n  static propTypes = {\n    value: PropTypes.array,\n  };\n\n  static defaultProps = {\n    value: [],\n  };\n\n  constructor(props) {\n    super(props);\n    const len = this.props.value.length || 0;\n    this.state = {\n      foldList: new Array(len).fill(false) || [],\n    };\n  }\n\n  // 新添加的item默认是展开的\n  addUnfoldItem = () =>\n    this.setState({\n      foldList: [...this.state.foldList, 0],\n    });\n\n  toggleFoldItem = index => {\n    const { foldList = [] } = this.state;\n    foldList[index] = !foldList[index]; // TODO: need better solution for the weird behavior caused by setState being async\n    this.setState({\n      foldList,\n    });\n  };\n\n  handleSort = ({ oldIndex, newIndex }) => {\n    const { onChange, value } = this.props;\n    onChange(arrayMove(value, oldIndex, newIndex));\n    this.setState({\n      foldList: arrayMove(this.state.foldList, oldIndex, newIndex),\n    });\n  };\n\n  render() {\n    const { foldList } = this.state;\n    return (\n      <SortableList\n        p={this.props}\n        foldList={foldList}\n        toggleFoldItem={this.toggleFoldItem}\n        addUnfoldItem={this.addUnfoldItem}\n        distance={6}\n        useDragHandle\n        helperClass='fr-sort-help-class'\n        shouldCancelStart={e =>\n          e.toElement && e.toElement.className === 'fr-tooltip-container'\n        }\n        onSortEnd={this.handleSort}\n      />\n    );\n  }\n}\n\nfunction FrButton({ icon, children, ...rest }) {\n  let iconName;\n  switch (icon) {\n    case 'add':\n      iconName = 'PlusCircleOutlined';\n      break;\n    case 'delete':\n      iconName = 'DeleteOutlined';\n      break;\n    default:\n      iconName = icon;\n      break;\n  }\n  const IconComponent = Icons[iconName];\n  if (IconComponent) {\n    return (\n      <Button {...rest} icon={<IconComponent />}>\n        {children}\n      </Button>\n    );\n  }\n  return <Button {...rest}>{children}</Button>;\n}\n\nexport default list;\n","/Users/nasa/code/try/fr1.0/src/components/descList.jsx",["173","174"],"import React from 'react';\nimport { isFunction } from '../utils';\n\nconst getEnumValue = (value, enums, enumNames) => {\n  if (Array.isArray(enums) && Array.isArray(enumNames)) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      const count = enums.indexOf(value);\n      if (count > -1) {\n        return enumNames[count];\n      }\n      return value;\n    } else if (Array.isArray(value)) {\n      const result = value.map((v) => getEnumValue(value, enums, enumNames));\n      return String(result);\n    }\n    return value;\n  }\n  return value;\n};\n\nconst DescriptionList = ({ schema = {}, value = [], index }) => {\n  const list = getDescription({ schema, value, index })\n    .filter((item) => item.title)\n    .slice(0, 3);\n  return (\n    <ul className=\"flex overflow-hidden\" style={{ paddingRight: 45 }}>\n      {list.map((item, i) => {\n        return item.title ? (\n          <li className=\"flex-auto mr2 overflow-hidden\" key={i}>\n            <span className=\"fw5\">{item.title}: </span>\n            <span>{item.text}</span>\n          </li>\n        ) : null;\n      })}\n    </ul>\n  );\n};\n\nexport default DescriptionList;\n\n// 获得title，value值list\nexport const getDescription = ({ schema = {}, value = [], index }) => {\n  const { items = {} } = schema;\n  // 只有当items为object时才做收起（fold）处理\n  if (items.type !== 'object') {\n    return [];\n  }\n  let titles = (items && items.properties) || {};\n  titles = Object.values(titles);\n  let description = (value && value.length && value[index]) || {};\n  const valueList = Object.values(description);\n  const descList = titles.map((t, idx) => {\n    let hidden = t && t['ui:hidden'];\n    // ui:hidden为判断式时解析 TODO: 解析在外部集中做\n    if (hidden) return;\n    const title = t.title;\n    let text = valueList[idx];\n    if (text === null && text === undefined) {\n      text = '';\n    } else if (typeof text === 'boolean') {\n      text = text ? '是' : '否';\n    } else if (typeof text !== 'string' && typeof text !== 'number' && text) {\n      text = '{复杂结构}';\n    } else if (t.enum && t.enumNames) {\n      text = getEnumValue(text, t.enum, t.enumNames);\n    }\n    return {\n      title,\n      text,\n    };\n  });\n  // 去空\n  return descList.filter((d) => !!d);\n};\n","/Users/nasa/code/try/fr1.0/src/components/dateHoc.jsx",["175"],"/**\n * Created by Tw93 on 2019-12-07.\n * 抽离高阶日期组件\n */\n\nimport React from 'react';\nimport moment from 'moment';\nimport { getFormat } from '../utils';\n\nexport default (p, onChange, DateComponent) => {\n  const style = p.invalid ? { borderColor: '#f5222d' } : {};\n  const { format = 'dateTime' } = p.schema;\n  const dateFormat = getFormat(format);\n  let defaultObj = {};\n  if (p.value) {\n    defaultObj.value = moment(p.value, dateFormat);\n  } else {\n    defaultObj.value = '';\n  }\n\n  const placeholderObj = p.description ? { placeholder: p.description } : {};\n\n  const dateParams = {\n    ...placeholderObj,\n    ...p.options,\n    ...defaultObj,\n    style: { width: '100%', ...style },\n    disabled: p.disabled || p.readonly,\n    onChange,\n  };\n\n  if (format === 'dateTime') {\n    dateParams.showTime = true;\n  }\n\n  return <DateComponent {...dateParams} />;\n};\n","/Users/nasa/code/try/fr1.0/src/components/foldIcon.jsx",[],"/Users/nasa/code/try/fr1.0/src/components/rangeHoc.jsx",["176"],"/**\n * Created by Tw93 on 2019-12-07.\n * 抽离高阶日期组件\n */\n\nimport React from 'react';\nimport moment from 'moment';\nimport { getFormat } from '../utils';\n\nexport default (p, onChange, RangeComponent) => {\n  const { format = 'dateTime' } = p.schema;\n  const dateFormat = getFormat(format);\n  let defaultObj = {};\n  if (p.value && Array.isArray(p.value) && p.value[0] && p.value[1]) {\n    defaultObj = {\n      defaultValue: [\n        moment(p.value[0], dateFormat),\n        moment(p.value[1], dateFormat),\n      ],\n    };\n  }\n  const datePrams = {\n    ...p.options,\n    ...defaultObj,\n    style: { width: '100%' },\n    showTime: format === 'dateTime',\n    disabled: p.disabled || p.readonly,\n    onChange,\n  };\n  return <RangeComponent {...datePrams} />;\n};\n","/Users/nasa/code/try/fr1.0/src/components/multiSelectHoc.jsx",["177"],"/**\n * Created by Tw93 on 2019-12-07.\n * 抽离高阶多选组件\n */\n\nimport React from 'react';\n\nexport default (MultiComponent) => (p) => {\n  const { Option } = MultiComponent;\n  const onChange = (value) => p.onChange(value);\n  const style = p.invalid ? { borderColor: '#f5222d' } : {};\n  const { enum: enums, enumNames } = p.schema || {};\n  const _value = p.value && Array.isArray(p.value) ? p.value : [];\n  return (\n    <MultiComponent\n      {...p.options}\n      style={{ width: '100%', ...style }}\n      mode=\"multiple\"\n      disabled={p.disabled || p.readonly}\n      value={_value}\n      onChange={onChange}\n    >\n      {(enums || []).map((val, index) => (\n        <Option value={val} key={index}>\n          <span\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{\n              __html: enumNames ? enumNames[index] : val,\n            }}\n          />\n        </Option>\n      ))}\n    </MultiComponent>\n  );\n};\n","/Users/nasa/code/try/fr1.0/src/components/numberHoc.jsx",["178"],"/**\n * Created by Tw93 on 2019-12-07.\n * 抽离数字输入组件\n */\n\nimport React from 'react';\n\nexport default (NumberComponent) => (p) => {\n  const style = p.invalid ? { borderColor: '#f5222d' } : {};\n  const { max, min, step } = p.schema;\n  let obj = {};\n  if (max || max === 0) {\n    obj = { max };\n  }\n\n  if (min || min === 0) {\n    obj = { ...obj, min };\n  }\n\n  if (step) {\n    obj = { ...obj, step };\n  }\n\n  return (\n    <NumberComponent\n      {...obj}\n      style={{ width: '100%', ...style }}\n      disabled={p.disabled || p.readonly}\n      {...p.options}\n      value={p.value}\n      onChange={p.onChange}\n    />\n  );\n};\n","/Users/nasa/code/try/fr1.0/src/components/radioHoc.jsx",["179"],"/**\n * Created by Tw93 on 2019-12-07.\n * 单选输入组件\n */\n\nimport React from 'react';\n\nexport default (p, onChange, RadioComponent) => {\n  const RadioGroup = RadioComponent.Group;\n  const { enum: enums, enumNames } = p.schema || {};\n  return (\n    <RadioGroup\n      disabled={p.disabled || p.readonly}\n      value={p.value}\n      onChange={onChange}\n    >\n      {(enums || [true, false]).map((val, index) => (\n        <RadioComponent value={val} key={index}>\n          <span\n            // eslint-disable-next-line react/no-danger\n            dangerouslySetInnerHTML={{\n              __html: enumNames ? enumNames[index] : val,\n            }}\n          />\n        </RadioComponent>\n      ))}\n    </RadioGroup>\n  );\n};\n","/Users/nasa/code/try/fr1.0/src/components/previewContent.jsx",["180"],"import React from 'react';\n\nconst defaultImg =\n  'https://img.alicdn.com/tfs/TB14tSiKhTpK1RjSZFKXXa2wXXa-354-330.png';\n\nexport default (format, value) => {\n  return format === 'image' ? (\n    <img\n      src={value || defaultImg}\n      alt=\"图片地址错误\"\n      className=\"fr-preview-image\"\n    />\n  ) : null;\n};\n","/Users/nasa/code/try/fr1.0/src/components/selectHoc.jsx",["181"],"/**\n * Created by Tw93 on 2019-12-07.\n * 高阶选择组件\n */\n\nimport React from 'react';\n\nexport default (SelectComponent) => (p) => {\n  const { Option } = SelectComponent;\n  const onChange = (value) => p.onChange(value);\n  const style = p.invalid ? { borderColor: '#f5222d' } : {};\n  const { enum: enums, enumNames } = p.schema || {};\n  return (\n    <SelectComponent\n      style={{ width: '100%', ...style }}\n      {...p.options}\n      disabled={p.disabled || p.readonly}\n      value={p.value}\n      onChange={onChange}\n    >\n      {(enums || []).map((val, index) => {\n        let option = enumNames ? enumNames[index] : val;\n        const isHtml = typeof option === 'string' && option[0] === '<';\n        if (isHtml) {\n          option = <span dangerouslySetInnerHTML={{ __html: option }} />;\n        }\n        return (\n          <Option value={val} key={index}>\n            {option}\n          </Option>\n        );\n      })}\n    </SelectComponent>\n  );\n};\n",{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":210,"column":40,"nodeType":"188","messageId":"189","endLine":210,"endColumn":88},{"ruleId":"186","severity":1,"message":"187","line":214,"column":3,"nodeType":"188","messageId":"189","endLine":217,"endColumn":25},{"ruleId":"190","severity":1,"message":"191","line":266,"column":7,"nodeType":"192","messageId":"193","endLine":266,"endColumn":22},{"ruleId":"186","severity":1,"message":"187","line":650,"column":10,"nodeType":"188","messageId":"189","endLine":650,"endColumn":55},{"ruleId":"194","severity":1,"message":"195","line":697,"column":29,"nodeType":"196","messageId":"197","endLine":697,"endColumn":31},{"ruleId":"194","severity":1,"message":"195","line":755,"column":29,"nodeType":"196","messageId":"197","endLine":755,"endColumn":31},{"ruleId":"198","severity":1,"message":"199","line":803,"column":25,"nodeType":"200","messageId":"201","endLine":803,"endColumn":27},{"ruleId":"202","severity":1,"message":"203","line":810,"column":59,"nodeType":"204","messageId":"205","endLine":810,"endColumn":60,"suggestions":"206"},{"ruleId":"202","severity":1,"message":"207","line":810,"column":61,"nodeType":"204","messageId":"205","endLine":810,"endColumn":62,"suggestions":"208"},{"ruleId":"202","severity":1,"message":"209","line":810,"column":63,"nodeType":"204","messageId":"205","endLine":810,"endColumn":64,"suggestions":"210"},{"ruleId":"198","severity":1,"message":"199","line":818,"column":17,"nodeType":"200","messageId":"201","endLine":818,"endColumn":19},{"ruleId":"198","severity":1,"message":"199","line":818,"column":37,"nodeType":"200","messageId":"201","endLine":818,"endColumn":39},{"ruleId":"190","severity":1,"message":"211","line":10,"column":11,"nodeType":"192","messageId":"193","endLine":10,"endColumn":15},{"ruleId":"198","severity":1,"message":"199","line":63,"column":57,"nodeType":"200","messageId":"201","endLine":63,"endColumn":59},{"ruleId":"190","severity":1,"message":"212","line":2,"column":10,"nodeType":"192","messageId":"193","endLine":2,"endColumn":20},{"ruleId":"194","severity":1,"message":"195","line":55,"column":17,"nodeType":"213","messageId":"214","endLine":55,"endColumn":24},{"ruleId":"215","severity":1,"message":"216","line":10,"column":1,"nodeType":"217","endLine":37,"endColumn":3},{"ruleId":"215","severity":1,"message":"216","line":10,"column":1,"nodeType":"217","endLine":31,"endColumn":3},{"ruleId":"215","severity":1,"message":"216","line":8,"column":1,"nodeType":"217","endLine":35,"endColumn":3},{"ruleId":"215","severity":1,"message":"216","line":8,"column":1,"nodeType":"217","endLine":34,"endColumn":3},{"ruleId":"215","severity":1,"message":"216","line":8,"column":1,"nodeType":"217","endLine":29,"endColumn":3},{"ruleId":"215","severity":1,"message":"216","line":6,"column":1,"nodeType":"217","endLine":14,"endColumn":3},{"ruleId":"215","severity":1,"message":"216","line":8,"column":1,"nodeType":"217","endLine":35,"endColumn":3},"no-native-reassign",["218"],"no-negated-in-lhs",["219"],"no-new-func","The Function constructor is eval.","CallExpression","noFunctionConstructor","no-unused-vars","'copyFlattenItem' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["220","221"],"Unnecessary escape character: \\/.",["222","223"],"Unnecessary escape character: \\[.",["224","225"],"'type' is assigned a value but never used.","'isFunction' is defined but never used.","ReturnStatement","expectedReturnValue","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"messageId":"226","fix":"227","desc":"228"},{"messageId":"229","fix":"230","desc":"231"},{"messageId":"226","fix":"232","desc":"228"},{"messageId":"229","fix":"233","desc":"231"},{"messageId":"226","fix":"234","desc":"228"},{"messageId":"229","fix":"235","desc":"231"},"removeEscape",{"range":"236","text":"237"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"238","text":"239"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"240","text":"237"},{"range":"241","text":"239"},{"range":"242","text":"237"},{"range":"243","text":"239"},[22714,22715],"",[22714,22714],"\\",[22716,22717],[22716,22716],[22718,22719],[22718,22718]]